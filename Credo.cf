comment "//" ;
comment "/*" "*/" ;

Program. Program ::= [Function];
terminator Function "";

Function.  Function ::= Type Ident "(" [ArgumentDeclaration] ")" "{" [Statement] "}";
separator  ArgumentDeclaration ",";
terminator Statement ";";

ArgumentDeclaration.  ArgumentDeclaration ::= Type Ident;

-- separator  nonempty Ident "," ;
VariableDeclaration.  VariableDeclaration ::= Type Ident;

SAssignment. Statement  ::= Ident "=" Expression ;
SBlock. Statement ::= "{" [Statement] "}" ;
SDeclaration. Statement ::= VariableDeclaration;
SExpression. Statement ::= Expression;
SIfBare. Statement ::= "if" "(" Expression ")" "{" [Statement] "}";
SIfElse. Statement ::= "if" "(" Expression ")" "{" [Statement] "}" "else" "{" [Statement] "}";
SReturn. Statement ::= "return" Expression;
--SWhile. Statement ::= "while" "(" Expression ")" Statement ;


--EAssignment. Expression  ::= Ident "=" Expression ;
ELess. Expression1 ::= Expression2 "<" Expression2 ;
EAdd.    Expression2 ::= Expression2 "+" Expression3 ;
--ESub.    Expression2 ::= Expression2 "-" Expression3 ;
--EMul.    Expression3 ::= Expression3 "*" Expression4 ;
ECall.    Expression4 ::= Ident "(" [Expression] ")" ;
EVariable.    Expression4 ::= Ident ;
--EStr.    Expression4 ::= String;
EBoolean. Expression4 ::= Boolean;
EInteger.    Expression4 ::= Integer;
--EDouble. Expression4 ::= Double;

coercions Expression 4 ;

separator Expression ",";

TBoolean. Type ::= "bool";
TInt. Type ::= "int";
--TDouble. Type ::= "double";

ValueFalse. Boolean ::= "false";
ValueTrue. Boolean ::= "true";
