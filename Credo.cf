comment "//" ;
comment "/*" "*/" ;

Program. Program ::= [Function];
terminator Function "";

Function.  Function ::= Type Ident "(" [ArgumentDeclaration] ")" "{" [Statement] "}";
separator  ArgumentDeclaration ",";
terminator Statement ";";

ArgumentDeclaration.  ArgumentDeclaration ::= Type Ident;

-- separator  nonempty Ident "," ;
VariableDeclaration.  VariableDeclaration ::= Type Ident;

SAssignment. Statement  ::= Lvalue "=" Expression ;
SBlock. Statement ::= "{" [Statement] "}" ;
SDeclaration. Statement ::= VariableDeclaration "=" Expression;
SExpression. Statement ::= Expression;
SIfBare. Statement ::= "if" "(" Expression ")" "{" [Statement] "}";
SIfElse. Statement ::= "if" "(" Expression ")" "{" [Statement] "}" "else" "{" [Statement] "}";
SPrint. Statement ::= PrintStatement;
SReturn. Statement ::= "return" Expression;
SWhile. Statement ::= "while" "(" Expression ")" "{" [Statement] "}";

LIdentifier. Lvalue ::= Ident;
LAddress. Lvalue ::= "*" Lvalue;
LIndex. Lvalue ::= Ident "[" Expression "]";

PrintString. PrintStatement ::= "print" String;
PrintInteger. PrintStatement ::= "print" Expression;

EEqual. Expression1 ::= Expression1 "==" Expression2;
ELess. Expression1 ::= Expression2 "<" Expression2;
ELessEqual. Expression1 ::= Expression2 "<=" Expression2;
EAdd. Expression2 ::= Expression2 "+" Expression3;
ESub. Expression2 ::= Expression2 "-" Expression3;
EMul. Expression3 ::= Expression3 "*" Expression4;
EDiv. Expression3 ::= Expression3 "/" Expression4;
EMod. Expression3 ::= Expression3 "%" Expression4;


EAnd. Expression3 ::= Expression3 "and" Expression4;
EOr. Expression2 ::= Expression2 "or" Expression3;
ENot. Expression4 ::= "not" Expression4;

ECall. Expression4 ::= Ident "(" [Expression] ")";
EVariable. Expression4 ::= Ident ;
EReference. Expression4 ::= "&" Lvalue;
ELvalue. Expression4 ::= Lvalue;
ENewArray. Expression4 ::= "new" Type "[" Expression "]" "filled" "with" Expression;
--EStr. Expression4 ::= String;
EBoolean. Expression4 ::= Boolean;
EInteger. Expression4 ::= Integer;
--EDouble. Expression4 ::= Double;

coercions Expression 4 ;

separator Expression ",";

TBoolean. Type ::= "bool";
TInt. Type ::= "int";
TPointer. Type ::= "*" Type;
--TDouble. Type ::= "double";

ValueFalse. Boolean ::= "false";
ValueTrue. Boolean ::= "true";
